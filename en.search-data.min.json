[{"id":0,"href":"/clockdriveos/explanations/","title":"Explanations","parent":"Documentation","content":"The Explanations is where your users find out about your project. Depending on the size of your docset, you can have a separate explanation page (like this one) or put your explanation contents in the Documentation landing page (like in the Docsy User Guide).\n Try answering these questions for your user in this page:\n What is it? Introduce your project, including what it does or lets you do, why you would use it, and its primary goal (and how it achieves it). This should be similar to your README description, though you can go into a little more detail here if you want.\n   Why do I want it? Help your user know if your project will help them. Useful information can include:\n   What is it good for?: What types of problems does your project solve? What are the benefits of using it?\n  What is it not good for?: For example, point out situations that might intuitively seem suited for your project, but aren’t for some reason. Also mention known limitations, scaling issues, or anything else that might let your users know if the project is not for them.\n  What is it not yet good for?: Highlight any useful features that are coming soon.\n     Where should I go next? Give your users next steps from the Explanations. For example:\n   Getting Started: Get started with $project\n  Examples: Check out some example code!\n     "},{"id":1,"href":"/clockdriveos/references/reference-architecture/","title":"Reference Architecture","parent":"References","content":"  "},{"id":2,"href":"/clockdriveos/how-to-guides/","title":"How-To Guides","parent":"Documentation","content":"Think about your project’s features and use cases. Use these to choose your core tasks. Each granular use case (enable x, configure y) should have a corresponding tasks page or tasks page section. Users should be able to quickly refer to your core tasks when they need to find out how to do one specific thing, rather than having to look for the instructions in a bigger tutorial or example. Think of your tasks pages as a cookbook with different procedures your users can combine to create something more substantial.\n You can give each task a page, or you can group related tasks together in a page, such as tasks related to a particular feature. As well as grouping related tasks in single pages, you can also group task pages in nested folders with an index page as an overview, as seen in this example site. Or if you have a small docset like the Docsy User Guide with no Tutorials or Concepts pages, consider adding your feature-specific pages at the top level of your docs rather than in a Tasks section.\n Each task should give the user\n   The prerequisites for this task, if any (this can be specified at the top of a multi-task page if they’re the same for all the page’s tasks. \u0026#34;All these tasks assume that you understand…​.and that you have already…​.\u0026#34;).\n  What this task accomplishes.\n  Instructions for the task. If it involves editing a file, running a command, or writing code, provide code-formatted example snippets to show the user what to do! If there are multiple steps, provide them as a numbered list.\n  If appropriate, links to related concept, tutorial, or example pages.\n   "},{"id":3,"href":"/clockdriveos/tutorials/","title":"Tutorials","parent":"Documentation","content":"Tutorials are complete worked examples made up of multiple tasks that guide the user through a relatively simple but realistic scenario: building an application that uses some of your project’s features, for example. If you have already created some Examples for your project you can base Tutorials on them. This section is optional. However, remember that although you may not need this section at first, having tutorials can be useful to help your users engage with your example code, especially if there are aspects that need more explanation than you can easily provide in code comments.\n "},{"id":4,"href":"/clockdriveos/references/","title":"References","parent":"Documentation","content":"If your project has an API, configuration, or other reference - anything that users need to look up that’s at an even lower level than a single task - put (or link to it) here. You can serve and link to generated reference docs created using Doxygen, Javadoc, or other doc generation tools by putting them in your static/ directory. Find out more in Adding static content. For OpenAPI reference, Docsy also provides a Swagger UI layout and shortcode that renders Swagger UI using any OpenAPI YAML or JSON file as source.\n "},{"id":5,"href":"/clockdriveos/how-to-guides/contribution-guidelines/","title":"Contribution Guidelines","parent":"How-To Guides","content":"How to Contribute We use Hugo to format and generate our website, the Docsy theme for styling and site structure, and GitHub Actions for GitHub Pages to manage the deployment of the site. Hugo is an open-source static site generator that provides us with templates, content organisation in a standard directory structure, and a website generation engine. You write the pages in Markdown (or HTML if you want), and Hugo wraps them up into a website.\n All submissions, including submissions by project members, require review. We use GitHub pull requests for this purpose. Consult GitHub Help for more information on using pull requests.\n   How to write good documentation There are four types of documentation: Tutorials, How-To Guides, References, and Explanations. Consult the The Documentation System for:\n   How to write good tutorials\n  How to write good how-to guides\n  How to write good reference guides\n  How to write good explanation\n     Updating the site Here’s a quick guide to updating the site:\n  Fork the PID-controlled clock drive on GitHub.\n  Make your changes and create a pull request (PR).\n  If you’re not yet ready for a review, add \u0026#34;WIP\u0026#34; to the PR name to indicate it’s a work in progress.\n  Continue updating your doc and pushing your changes until you’re happy with the content.\n  When you’re ready for a review, add a comment to the PR, and remove any \u0026#34;WIP\u0026#34; markers.\n     Updating a single page If you’ve just spotted something you’d like to change while using the docs, Docsy has a shortcut for you:\n  Click Edit this page in the top right hand corner of the page.\n  If you don’t already have an up to date fork of the project repo, you are prompted to get one - click Fork this repository and propose changes or Update your Fork to get an up to date version of the project to edit. The appropriate page in your fork is displayed in edit mode.\n  Follow the rest of the Updating the site process to propose your changes.\n     Previewing your changes If you want to preview your changes as you work, you’ll need to run your own local Hugo server:\n  Follow the instructions in Getting started to install Hugo and any other tools you need. You’ll need at least Hugo version 0.68.3. If you install from the release page, make sure you download the _extended version which supports SCSS.\n  Fork the PID-controlled clock drive into your own project, then create a local copy using git clone. Don’t forget to use --recurse-submodules or you won’t pull down some of the code you need to generate a working site.\n git clone --recurse-submodules --depth 1 https://github.com/\u0026lt;your_github_username\u0026gt;/pid-controlled-clock-drive.git     Run sh serve.sh in the site root directory. By default your site will be available at http://localhost:1313. Now that you’re serving your site locally, Hugo will watch for changes to the content and automatically refresh your site.\n sh serve.sh     Follow the rest of the Updating the site process to propose your changes.\n     Creating an issue If you’ve found a problem in the docs, but you’re not sure how to fix it yourself, please create an issue in the PID-controlled clock drive. You can also create an issue about a specific page by clicking the Create Issue button in the top right hand corner of the page.\n   Useful resources   link:wherever it goes[Docsy user guide]: All about Docsy, including how it manages navigation, look and feel, and multi-language support.\n  Hugo documentation: Comprehensive reference for Hugo.\n  Github Hello World!: A basic introduction to GitHub concepts and workflow.\n     "},{"id":6,"href":"/clockdriveos/","title":"Documentation","parent":"","content":"This section is where the user documentation for your project lives - all the information your users need to understand and successfully use your project.\nFor large documentation sets we recommend adding content under the headings in this section, though if some or all of them don’t apply to your project feel free to remove them or add your own. You can see an example of a smaller Docsy documentation site in the Docsy User Guide, which lives in the Docsy theme repo if you\u0026rsquo;d like to copy its docs section.\nOther content such as marketing material, case studies, and community updates should live in the About and Community pages.\nFind out how to use the Docsy theme in the Docsy User Guide. You can learn more about how to organize your documentation (and how we organized this site) in Organizing Your Content.\n"},{"id":7,"href":"/clockdriveos/categories/","title":"Categories","parent":"Documentation","content":""},{"id":8,"href":"/clockdriveos/search/","title":"Search Results","parent":"Documentation","content":""},{"id":9,"href":"/clockdriveos/tags/","title":"Tags","parent":"Documentation","content":""}]